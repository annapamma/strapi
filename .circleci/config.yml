# Use the latest 2.1 version of CircleCI pipeline processing engine, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1    

# end to end testing template
e2e_tests: &e2e_tests
    - run: npm run test:generate-app -- $DB_STRING
    - run: npm run test:start-app & wait-on http://localhost:1337
    - run: npm run test:e2e

# Define the jobs
jobs:
    build:
        # working_directory: ~/mern-starter
        docker:
            - image: circleci/node:11.14.0
        steps:
            - checkout
            - run:
                name: update-npm
                command: 'sudo npm install -g npm@6.7.0'
            - restore_cache:
                key: dependency-cache-{{ checksum "package.json" }}
            - run:
                name: run-setup-ci
                command: sudo npm run setup:ci
            - run:
                name: install-npm-wee
                command: sudo npm install -g wait-on
            - save_cache:
                key: dependency-cache-{{ checksum "package.json" }}
                paths:
                    - ./node_modules            
    test:
        docker:
            - image: circleci/node:11.14.0
        steps:
            - run:
                name: test
                command: sudo node ./node_modules/.bin/snyk auth ${SNYK_TOKEN} && sudo npm run test:snyk
            - run:
                name: test-lint
                command: sudo npm run lint
            - run:
                name: test-unit
                command: sudo npm run test:unit
            - run:
                name: test-front
                command: sudo npm run test:front

    # <<: *e2e_tests:
    #     docker:
    #         - image: circleci/node:11.14.0
    #         - image: circleci/postgres:9.6-alpine

    # e2e_test_mysql:
    #     docker:
    #         - image: circleci/node:11.14.0
    #         - image: circleci/mysql

    # e2e_test_sqllite:
    #     docker:
    #         - image: circleci/node:11.14.0
    #         - image: circleci/postgres:9.6-alpine

    # e2e_test_mongo:
    #     docker:
    #         - image: circleci/node:11.14.0
    #         - image: circleci/postgres:mongo

# Orchestrate or schedule a set of jobs, see https://circleci.com/docs/2.0/workflows/
workflows:
  # Name the workflow "Welcome"
  build_and_test:
    # Run the welcome/run job in its own container
    jobs:   
        - build
        - test:
            requires:
                - build